# Generated from Funx.g by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,135,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,4,0,53,
        8,0,11,0,12,0,54,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
        1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
        12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,
        21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,5,22,117,8,22,10,22,12,22,
        120,9,22,1,23,1,23,5,23,124,8,23,10,23,12,23,127,9,23,1,24,4,24,
        130,8,24,11,24,12,24,131,1,24,1,24,0,0,25,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,1,0,5,1,0,48,57,
        1,0,97,122,3,0,48,57,65,90,97,122,1,0,65,90,2,0,10,10,32,32,138,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,52,
        1,0,0,0,3,56,1,0,0,0,5,58,1,0,0,0,7,60,1,0,0,0,9,62,1,0,0,0,11,64,
        1,0,0,0,13,66,1,0,0,0,15,68,1,0,0,0,17,71,1,0,0,0,19,73,1,0,0,0,
        21,76,1,0,0,0,23,78,1,0,0,0,25,80,1,0,0,0,27,83,1,0,0,0,29,86,1,
        0,0,0,31,89,1,0,0,0,33,95,1,0,0,0,35,100,1,0,0,0,37,102,1,0,0,0,
        39,104,1,0,0,0,41,106,1,0,0,0,43,108,1,0,0,0,45,114,1,0,0,0,47,121,
        1,0,0,0,49,129,1,0,0,0,51,53,7,0,0,0,52,51,1,0,0,0,53,54,1,0,0,0,
        54,52,1,0,0,0,54,55,1,0,0,0,55,2,1,0,0,0,56,57,5,43,0,0,57,4,1,0,
        0,0,58,59,5,45,0,0,59,6,1,0,0,0,60,61,5,42,0,0,61,8,1,0,0,0,62,63,
        5,47,0,0,63,10,1,0,0,0,64,65,5,37,0,0,65,12,1,0,0,0,66,67,5,94,0,
        0,67,14,1,0,0,0,68,69,5,60,0,0,69,70,5,45,0,0,70,16,1,0,0,0,71,72,
        5,61,0,0,72,18,1,0,0,0,73,74,5,33,0,0,74,75,5,61,0,0,75,20,1,0,0,
        0,76,77,5,60,0,0,77,22,1,0,0,0,78,79,5,62,0,0,79,24,1,0,0,0,80,81,
        5,62,0,0,81,82,5,61,0,0,82,26,1,0,0,0,83,84,5,60,0,0,84,85,5,61,
        0,0,85,28,1,0,0,0,86,87,5,105,0,0,87,88,5,102,0,0,88,30,1,0,0,0,
        89,90,5,119,0,0,90,91,5,104,0,0,91,92,5,105,0,0,92,93,5,108,0,0,
        93,94,5,101,0,0,94,32,1,0,0,0,95,96,5,101,0,0,96,97,5,108,0,0,97,
        98,5,115,0,0,98,99,5,101,0,0,99,34,1,0,0,0,100,101,5,123,0,0,101,
        36,1,0,0,0,102,103,5,125,0,0,103,38,1,0,0,0,104,105,5,40,0,0,105,
        40,1,0,0,0,106,107,5,41,0,0,107,42,1,0,0,0,108,109,5,119,0,0,109,
        110,5,114,0,0,110,111,5,105,0,0,111,112,5,116,0,0,112,113,5,101,
        0,0,113,44,1,0,0,0,114,118,7,1,0,0,115,117,7,2,0,0,116,115,1,0,0,
        0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,46,1,0,0,0,
        120,118,1,0,0,0,121,125,7,3,0,0,122,124,7,2,0,0,123,122,1,0,0,0,
        124,127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,48,1,0,0,0,127,
        125,1,0,0,0,128,130,7,4,0,0,129,128,1,0,0,0,130,131,1,0,0,0,131,
        129,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,134,6,24,0,0,134,
        50,1,0,0,0,5,0,54,118,125,131,1,6,0,0
    ]

class FunxLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUM = 1
    SUM = 2
    SUB = 3
    MULT = 4
    DIV = 5
    MOD = 6
    EXP = 7
    ASSIGN = 8
    EQ = 9
    NEQ = 10
    LT = 11
    GT = 12
    GE = 13
    LE = 14
    IF = 15
    WHILE = 16
    ELSE = 17
    KEYL = 18
    KEYR = 19
    LP = 20
    RP = 21
    WRITE = 22
    IDVAR = 23
    IDFUNC = 24
    WS = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'<-'", "'='", "'!='", 
            "'<'", "'>'", "'>='", "'<='", "'if'", "'while'", "'else'", "'{'", 
            "'}'", "'('", "')'", "'write'" ]

    symbolicNames = [ "<INVALID>",
            "NUM", "SUM", "SUB", "MULT", "DIV", "MOD", "EXP", "ASSIGN", 
            "EQ", "NEQ", "LT", "GT", "GE", "LE", "IF", "WHILE", "ELSE", 
            "KEYL", "KEYR", "LP", "RP", "WRITE", "IDVAR", "IDFUNC", "WS" ]

    ruleNames = [ "NUM", "SUM", "SUB", "MULT", "DIV", "MOD", "EXP", "ASSIGN", 
                  "EQ", "NEQ", "LT", "GT", "GE", "LE", "IF", "WHILE", "ELSE", 
                  "KEYL", "KEYR", "LP", "RP", "WRITE", "IDVAR", "IDFUNC", 
                  "WS" ]

    grammarFileName = "Funx.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


