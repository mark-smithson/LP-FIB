# Generated from Funx.g by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,163,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,4,0,65,8,0,11,
        0,12,0,66,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
        7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,
        1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
        1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,
        1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,5,28,145,8,28,10,28,
        12,28,148,9,28,1,29,1,29,5,29,152,8,29,10,29,12,29,155,9,29,1,30,
        4,30,158,8,30,11,30,12,30,159,1,30,1,30,0,0,31,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,1,0,5,1,0,48,57,1,0,97,122,3,0,48,57,65,
        90,97,122,1,0,65,90,2,0,10,10,32,32,166,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,1,64,1,0,0,0,3,
        68,1,0,0,0,5,70,1,0,0,0,7,72,1,0,0,0,9,74,1,0,0,0,11,76,1,0,0,0,
        13,78,1,0,0,0,15,80,1,0,0,0,17,83,1,0,0,0,19,85,1,0,0,0,21,88,1,
        0,0,0,23,90,1,0,0,0,25,92,1,0,0,0,27,95,1,0,0,0,29,98,1,0,0,0,31,
        101,1,0,0,0,33,107,1,0,0,0,35,112,1,0,0,0,37,114,1,0,0,0,39,116,
        1,0,0,0,41,118,1,0,0,0,43,120,1,0,0,0,45,122,1,0,0,0,47,124,1,0,
        0,0,49,126,1,0,0,0,51,129,1,0,0,0,53,132,1,0,0,0,55,136,1,0,0,0,
        57,142,1,0,0,0,59,149,1,0,0,0,61,157,1,0,0,0,63,65,7,0,0,0,64,63,
        1,0,0,0,65,66,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,2,1,0,0,0,68,
        69,5,43,0,0,69,4,1,0,0,0,70,71,5,45,0,0,71,6,1,0,0,0,72,73,5,42,
        0,0,73,8,1,0,0,0,74,75,5,47,0,0,75,10,1,0,0,0,76,77,5,37,0,0,77,
        12,1,0,0,0,78,79,5,94,0,0,79,14,1,0,0,0,80,81,5,60,0,0,81,82,5,45,
        0,0,82,16,1,0,0,0,83,84,5,61,0,0,84,18,1,0,0,0,85,86,5,33,0,0,86,
        87,5,61,0,0,87,20,1,0,0,0,88,89,5,60,0,0,89,22,1,0,0,0,90,91,5,62,
        0,0,91,24,1,0,0,0,92,93,5,62,0,0,93,94,5,61,0,0,94,26,1,0,0,0,95,
        96,5,60,0,0,96,97,5,61,0,0,97,28,1,0,0,0,98,99,5,105,0,0,99,100,
        5,102,0,0,100,30,1,0,0,0,101,102,5,119,0,0,102,103,5,104,0,0,103,
        104,5,105,0,0,104,105,5,108,0,0,105,106,5,101,0,0,106,32,1,0,0,0,
        107,108,5,101,0,0,108,109,5,108,0,0,109,110,5,115,0,0,110,111,5,
        101,0,0,111,34,1,0,0,0,112,113,5,123,0,0,113,36,1,0,0,0,114,115,
        5,125,0,0,115,38,1,0,0,0,116,117,5,40,0,0,117,40,1,0,0,0,118,119,
        5,41,0,0,119,42,1,0,0,0,120,121,5,91,0,0,121,44,1,0,0,0,122,123,
        5,93,0,0,123,46,1,0,0,0,124,125,5,44,0,0,125,48,1,0,0,0,126,127,
        5,124,0,0,127,128,5,61,0,0,128,50,1,0,0,0,129,130,5,60,0,0,130,131,
        5,60,0,0,131,52,1,0,0,0,132,133,5,108,0,0,133,134,5,101,0,0,134,
        135,5,110,0,0,135,54,1,0,0,0,136,137,5,119,0,0,137,138,5,114,0,0,
        138,139,5,105,0,0,139,140,5,116,0,0,140,141,5,101,0,0,141,56,1,0,
        0,0,142,146,7,1,0,0,143,145,7,2,0,0,144,143,1,0,0,0,145,148,1,0,
        0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,58,1,0,0,0,148,146,1,0,0,
        0,149,153,7,3,0,0,150,152,7,2,0,0,151,150,1,0,0,0,152,155,1,0,0,
        0,153,151,1,0,0,0,153,154,1,0,0,0,154,60,1,0,0,0,155,153,1,0,0,0,
        156,158,7,4,0,0,157,156,1,0,0,0,158,159,1,0,0,0,159,157,1,0,0,0,
        159,160,1,0,0,0,160,161,1,0,0,0,161,162,6,30,0,0,162,62,1,0,0,0,
        5,0,66,146,153,159,1,6,0,0
    ]

class FunxLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUM = 1
    SUM = 2
    SUB = 3
    MULT = 4
    DIV = 5
    MOD = 6
    EXP = 7
    ASSIGN = 8
    EQ = 9
    NEQ = 10
    LT = 11
    GT = 12
    GE = 13
    LE = 14
    IF = 15
    WHILE = 16
    ELSE = 17
    KEYL = 18
    KEYR = 19
    LP = 20
    RP = 21
    LC = 22
    RC = 23
    COMMA = 24
    LISTC = 25
    LISTARR = 26
    LEN = 27
    WRITE = 28
    IDVAR = 29
    IDFUNC = 30
    WS = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'<-'", "'='", "'!='", 
            "'<'", "'>'", "'>='", "'<='", "'if'", "'while'", "'else'", "'{'", 
            "'}'", "'('", "')'", "'['", "']'", "','", "'|='", "'<<'", "'len'", 
            "'write'" ]

    symbolicNames = [ "<INVALID>",
            "NUM", "SUM", "SUB", "MULT", "DIV", "MOD", "EXP", "ASSIGN", 
            "EQ", "NEQ", "LT", "GT", "GE", "LE", "IF", "WHILE", "ELSE", 
            "KEYL", "KEYR", "LP", "RP", "LC", "RC", "COMMA", "LISTC", "LISTARR", 
            "LEN", "WRITE", "IDVAR", "IDFUNC", "WS" ]

    ruleNames = [ "NUM", "SUM", "SUB", "MULT", "DIV", "MOD", "EXP", "ASSIGN", 
                  "EQ", "NEQ", "LT", "GT", "GE", "LE", "IF", "WHILE", "ELSE", 
                  "KEYL", "KEYR", "LP", "RP", "LC", "RC", "COMMA", "LISTC", 
                  "LISTARR", "LEN", "WRITE", "IDVAR", "IDFUNC", "WS" ]

    grammarFileName = "Funx.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


