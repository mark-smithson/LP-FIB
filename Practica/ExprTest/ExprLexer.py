# Generated from Expr.g by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,118,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,4,0,47,8,0,11,0,12,0,48,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,
        9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,
        14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,
        17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,5,20,107,8,
        20,10,20,12,20,110,9,20,1,21,4,21,113,8,21,11,21,12,21,114,1,21,
        1,21,0,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        1,0,4,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,2,0,10,10,32,32,120,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,46,1,0,0,0,3,50,
        1,0,0,0,5,52,1,0,0,0,7,54,1,0,0,0,9,56,1,0,0,0,11,58,1,0,0,0,13,
        60,1,0,0,0,15,62,1,0,0,0,17,65,1,0,0,0,19,67,1,0,0,0,21,70,1,0,0,
        0,23,72,1,0,0,0,25,74,1,0,0,0,27,77,1,0,0,0,29,80,1,0,0,0,31,83,
        1,0,0,0,33,89,1,0,0,0,35,94,1,0,0,0,37,96,1,0,0,0,39,98,1,0,0,0,
        41,104,1,0,0,0,43,112,1,0,0,0,45,47,7,0,0,0,46,45,1,0,0,0,47,48,
        1,0,0,0,48,46,1,0,0,0,48,49,1,0,0,0,49,2,1,0,0,0,50,51,5,43,0,0,
        51,4,1,0,0,0,52,53,5,45,0,0,53,6,1,0,0,0,54,55,5,42,0,0,55,8,1,0,
        0,0,56,57,5,47,0,0,57,10,1,0,0,0,58,59,5,37,0,0,59,12,1,0,0,0,60,
        61,5,94,0,0,61,14,1,0,0,0,62,63,5,60,0,0,63,64,5,45,0,0,64,16,1,
        0,0,0,65,66,5,61,0,0,66,18,1,0,0,0,67,68,5,33,0,0,68,69,5,61,0,0,
        69,20,1,0,0,0,70,71,5,60,0,0,71,22,1,0,0,0,72,73,5,62,0,0,73,24,
        1,0,0,0,74,75,5,62,0,0,75,76,5,61,0,0,76,26,1,0,0,0,77,78,5,60,0,
        0,78,79,5,61,0,0,79,28,1,0,0,0,80,81,5,105,0,0,81,82,5,102,0,0,82,
        30,1,0,0,0,83,84,5,119,0,0,84,85,5,104,0,0,85,86,5,105,0,0,86,87,
        5,108,0,0,87,88,5,101,0,0,88,32,1,0,0,0,89,90,5,101,0,0,90,91,5,
        108,0,0,91,92,5,115,0,0,92,93,5,101,0,0,93,34,1,0,0,0,94,95,5,123,
        0,0,95,36,1,0,0,0,96,97,5,125,0,0,97,38,1,0,0,0,98,99,5,119,0,0,
        99,100,5,114,0,0,100,101,5,105,0,0,101,102,5,116,0,0,102,103,5,101,
        0,0,103,40,1,0,0,0,104,108,7,1,0,0,105,107,7,2,0,0,106,105,1,0,0,
        0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,42,1,0,0,0,
        110,108,1,0,0,0,111,113,7,3,0,0,112,111,1,0,0,0,113,114,1,0,0,0,
        114,112,1,0,0,0,114,115,1,0,0,0,115,116,1,0,0,0,116,117,6,21,0,0,
        117,44,1,0,0,0,4,0,48,108,114,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUM = 1
    SUM = 2
    SUB = 3
    MULT = 4
    DIV = 5
    MOD = 6
    EXP = 7
    ASSIGN = 8
    EQ = 9
    NEQ = 10
    LT = 11
    GT = 12
    GE = 13
    LE = 14
    IF = 15
    WHILE = 16
    ELSE = 17
    KEYL = 18
    KEYR = 19
    WRITE = 20
    IDVAR = 21
    WS = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'<-'", "'='", "'!='", 
            "'<'", "'>'", "'>='", "'<='", "'if'", "'while'", "'else'", "'{'", 
            "'}'", "'write'" ]

    symbolicNames = [ "<INVALID>",
            "NUM", "SUM", "SUB", "MULT", "DIV", "MOD", "EXP", "ASSIGN", 
            "EQ", "NEQ", "LT", "GT", "GE", "LE", "IF", "WHILE", "ELSE", 
            "KEYL", "KEYR", "WRITE", "IDVAR", "WS" ]

    ruleNames = [ "NUM", "SUM", "SUB", "MULT", "DIV", "MOD", "EXP", "ASSIGN", 
                  "EQ", "NEQ", "LT", "GT", "GE", "LE", "IF", "WHILE", "ELSE", 
                  "KEYL", "KEYR", "WRITE", "IDVAR", "WS" ]

    grammarFileName = "Expr.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


