# Generated from Expr.g by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,64,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,
        1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,4,6,
        44,8,6,11,6,12,6,45,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,12,4,12,59,8,12,11,12,12,12,60,1,12,1,12,0,0,13,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,1,0,2,1,0,48,57,
        2,0,10,10,32,32,65,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,1,27,1,0,0,
        0,3,29,1,0,0,0,5,32,1,0,0,0,7,34,1,0,0,0,9,36,1,0,0,0,11,39,1,0,
        0,0,13,43,1,0,0,0,15,47,1,0,0,0,17,49,1,0,0,0,19,51,1,0,0,0,21,53,
        1,0,0,0,23,55,1,0,0,0,25,58,1,0,0,0,27,28,5,61,0,0,28,2,1,0,0,0,
        29,30,5,33,0,0,30,31,5,61,0,0,31,4,1,0,0,0,32,33,5,60,0,0,33,6,1,
        0,0,0,34,35,5,62,0,0,35,8,1,0,0,0,36,37,5,60,0,0,37,38,5,61,0,0,
        38,10,1,0,0,0,39,40,5,62,0,0,40,41,5,61,0,0,41,12,1,0,0,0,42,44,
        7,0,0,0,43,42,1,0,0,0,44,45,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,
        46,14,1,0,0,0,47,48,5,43,0,0,48,16,1,0,0,0,49,50,5,45,0,0,50,18,
        1,0,0,0,51,52,5,42,0,0,52,20,1,0,0,0,53,54,5,47,0,0,54,22,1,0,0,
        0,55,56,5,94,0,0,56,24,1,0,0,0,57,59,7,1,0,0,58,57,1,0,0,0,59,60,
        1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,62,1,0,0,0,62,63,6,12,0,0,
        63,26,1,0,0,0,3,0,45,60,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    NUM = 7
    SUM = 8
    SUB = 9
    MULT = 10
    DIV = 11
    EXP = 12
    WS = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'!='", "'<'", "'>'", "'<='", "'>='", "'+'", "'-'", "'*'", 
            "'/'", "'^'" ]

    symbolicNames = [ "<INVALID>",
            "NUM", "SUM", "SUB", "MULT", "DIV", "EXP", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "NUM", 
                  "SUM", "SUB", "MULT", "DIV", "EXP", "WS" ]

    grammarFileName = "Expr.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


