# Generated from Expr.g by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,90,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,4,0,37,8,0,11,0,12,0,38,1,
        1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,
        8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,5,15,79,8,15,10,15,12,15,
        82,9,15,1,16,4,16,85,8,16,11,16,12,16,86,1,16,1,16,0,0,17,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,1,0,4,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,2,0,10,10,32,32,92,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,
        36,1,0,0,0,3,40,1,0,0,0,5,42,1,0,0,0,7,44,1,0,0,0,9,46,1,0,0,0,11,
        48,1,0,0,0,13,50,1,0,0,0,15,52,1,0,0,0,17,55,1,0,0,0,19,57,1,0,0,
        0,21,60,1,0,0,0,23,62,1,0,0,0,25,64,1,0,0,0,27,67,1,0,0,0,29,70,
        1,0,0,0,31,76,1,0,0,0,33,84,1,0,0,0,35,37,7,0,0,0,36,35,1,0,0,0,
        37,38,1,0,0,0,38,36,1,0,0,0,38,39,1,0,0,0,39,2,1,0,0,0,40,41,5,43,
        0,0,41,4,1,0,0,0,42,43,5,45,0,0,43,6,1,0,0,0,44,45,5,42,0,0,45,8,
        1,0,0,0,46,47,5,47,0,0,47,10,1,0,0,0,48,49,5,37,0,0,49,12,1,0,0,
        0,50,51,5,94,0,0,51,14,1,0,0,0,52,53,5,60,0,0,53,54,5,45,0,0,54,
        16,1,0,0,0,55,56,5,61,0,0,56,18,1,0,0,0,57,58,5,33,0,0,58,59,5,61,
        0,0,59,20,1,0,0,0,60,61,5,60,0,0,61,22,1,0,0,0,62,63,5,62,0,0,63,
        24,1,0,0,0,64,65,5,62,0,0,65,66,5,61,0,0,66,26,1,0,0,0,67,68,5,60,
        0,0,68,69,5,61,0,0,69,28,1,0,0,0,70,71,5,119,0,0,71,72,5,114,0,0,
        72,73,5,105,0,0,73,74,5,116,0,0,74,75,5,101,0,0,75,30,1,0,0,0,76,
        80,7,1,0,0,77,79,7,2,0,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,
        0,80,81,1,0,0,0,81,32,1,0,0,0,82,80,1,0,0,0,83,85,7,3,0,0,84,83,
        1,0,0,0,85,86,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,88,1,0,0,0,
        88,89,6,16,0,0,89,34,1,0,0,0,4,0,38,80,86,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUM = 1
    SUM = 2
    SUB = 3
    MULT = 4
    DIV = 5
    MOD = 6
    EXP = 7
    ASSIGN = 8
    EQ = 9
    NEQ = 10
    LT = 11
    GT = 12
    GE = 13
    LE = 14
    WRITE = 15
    IDVAR = 16
    WS = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'<-'", "'='", "'!='", 
            "'<'", "'>'", "'>='", "'<='", "'write'" ]

    symbolicNames = [ "<INVALID>",
            "NUM", "SUM", "SUB", "MULT", "DIV", "MOD", "EXP", "ASSIGN", 
            "EQ", "NEQ", "LT", "GT", "GE", "LE", "WRITE", "IDVAR", "WS" ]

    ruleNames = [ "NUM", "SUM", "SUB", "MULT", "DIV", "MOD", "EXP", "ASSIGN", 
                  "EQ", "NEQ", "LT", "GT", "GE", "LE", "WRITE", "IDVAR", 
                  "WS" ]

    grammarFileName = "Expr.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


